The basic robot has:
2 registers, A and B
4 memory slots, controlled using a memory pointer
64 lines for instructions
1 lock, that can keep track of one enemy robot
5 hitpoints
2 damage with each shot

Each instruction must have exactly one parameter, although not all instructions use parameters.

Instructions:

wait - wait for P*constant cycles.
add - add B to A.
sub - subtract B from A.
inc - increment A by 1.
dec - dectrement A by 1.
swp - swap registers A and B.
setab - set value of B to A.
seta - set parameter value to A.
setb - set parameter value to B.
fire - fire a shot to location [A, B] (Can hit robot itself if used incorrectly).
scan - search for enemy robots, if at least one exists, lock it.
lock - set locked robot's X and Y coordinates to A and B.
rnd - generate random integer from -parameter to parameter (included) and save it to A.
rndb - generate random integer from -B to B (included) and save it to A.
posx - save current X position to A.
posy - save current Y position to A.
move - start moving to location [A, B]. Instructions work while moving, but they are considerably slower.
setmp - set memory pointer to value of A. (Incorrect value of memory pointer may cause unexpected results)
incmp - increment memory pointer.
decmp - decrement memory pointer.
memsave - save value of A to memory using memory pointer.
memload - load memory value to A using memory pointer.
jmp - jump to different instruction line. (Incorrect value may cause unexpected results).
jmpz - jump to parameter instruction line if value in A = 0.
jmpc - jump to parameter instruction line if robot is collided with something and can not move.
jmpm - jump to parameter instruction line if robot is currently moving.
jmpl - jump to parameter instruction line if nothing is locked. (No locked enemy robot).
