The basic robot parameters are defined as:
* word of size 4 bytes (signed 32bit integer)
* memory is word adressable
* 1 general purpose register A of 1 word size 
* 1 store register B of 1 word size 
* 1 memory pointer register of 1 word size 
* 4 words of RAM
* 64 words of ROM used to store program instruction codes
* 64 words of ROM used to store instruction parameters
* 1 lock register, that can keep track of one enemy robot
* 5 hitpoints
* 2 damage with each shot


Each instruction has zero or one parameter, all parameters are Int32, displayed on the main menu.

If you click on any robot ingame, you get some basic debug information: Value of registers A, B, memory pointer,
current line number and time to activate current instruction (IC - instruction cooldown).

Instructions are either without parameter, or with one word-size (Int32) parameter. All
instructons are operating on signed arithmetics. There is no status register or
stack. Jump instructions are using absolute adresses only.

A is used for main arithmetics, as incrementation, decrementatin or storing result for
adding and subtraction. B is used as additional storage for two operands operations,
as addition or subtraction. Both registers are used for storing bigger values, as
X and Y position of enemy robot.

Memory pointer is used for setting address for storing and loading values from RAM.

Lock register is not accessible directly, but its used by scan and lock instruction (and fire to attack enemy robot)
and its values can be loaded to A and B registers.

Instructions:

-	no parameter
P	parameter

Name	Param	Description
wait	P		wait for P*constant cycles.
add		-		add B to A.
sub		-		subtract B from A.
inc		-		increment A by 1.
dec		-		dectrement A by 1.
swp		-		swap registers A and B.
setab	-		set value of B to A.
seta	P		set parameter value to A.
setb	P		set parameter value to B.
fire	-		fire a shot to location [A, B] (Can hit robot itself if used incorrectly).
scan	-		search for enemy robots, if at least one exists, lock it.
lock	-		set locked robot's X and Y coordinates to A and B.
rnd		-		generate random integer from -parameter to parameter (included) and save it to A.
rndb	-		generate random integer from -B to B (included) and save it to A.
posx	-		save current X position to A.
posy	-		save current Y position to A.
move	-		start moving to location [A, B]. Instructions work while moving, but they are considerably slower.
setmp	-		set memory pointer to value of A. (Incorrect value of memory pointer may cause unexpected results)
incmp	-		increment memory pointer.
decmp	-		decrement memory pointer.
memsave	-		save value of A to memory using memory pointer.
memload	-		load memory value to A using memory pointer.
jmp		P		jump to different instruction line. (Incorrect value may cause unexpected results).
jmpz	P		jump to parameter instruction line if value in A = 0.
jmpc	P		jump to parameter instruction line if robot is collided with something and can not move.
jmpm	P		jump to parameter instruction line if robot is currently moving.
jmpl	P		jump to parameter instruction line if an enemy robot is locked. (lock != null)

Example 1: Move robot to a position.
;robot movement
seta 600
setb 400
move

Example 2: jumps
;infinite cycle
label:
 jmp label
 
; absolute jump
wait 1
wait 2
wait 3
jmp 2
; will jump to wait 3 instruction and cycle

; will search for an enemy robot and if lock found, shoots
lock:
 scan
 lock
 jmpl firing
 jmp lock
firing:
 fire
jmp lock
 
Example 3: basic cycle
;basic for cycle
seta 10
;loop 10 times
loop:
 wait 1
 ;check if loop ended
 jmpz endloop
 ;decrement a
 dec
 jmp loop
 ;if seta 10 is first instruction, jmp 1 would also work
endloop:
; loop ended, continue code